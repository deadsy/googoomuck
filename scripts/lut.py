#!/usr/bin/python

"""

Generate lookup tables.
The table has 32 bit floats in hex representation.

"""

import struct
import math
import sys

def float2hex(x):
  """convert a 32 bit to it's hex value"""
  buf = [ord(c) for c in struct.pack('!f', x)]
  return ''.join(['%02x' % b for b in buf])

def float2foo(x):
  return '%d' % int(x * (1 << 30))

def gen_ydy_table(name, bits, func):
  """output a table with y and dy values"""
  n = 1 << bits
  print('// generated by ./scripts/lut.py')
  print('#define %s_BITS (%dU)' % (name, bits))
  print('#define %s_SIZE (1U << %s_BITS)' % (name, name))
  print('static const int32_t %s_data[%s_SIZE << 1] = {' % (name, name))
  for i in range(n):
    if i == 0:
      sys.stdout.write('\t')
    if i != 0 and i % 4 == 0:
      sys.stdout.write('\r\n\t')
    (y, dy) = func(i)
    sys.stdout.write('%s, %s, ' % (y, dy))
  sys.stdout.write('\r\n};\r\n')

def cos_func(i, n):
  k = float(1 << n)
  y0 = math.cos(float(i) * 2.0 * math.pi / k)
  y1 = math.cos(float(i+1) * 2.0 * math.pi / k)
  y = float2foo(y0)
  dy = float2foo(y1 - y0)
  return (y, dy)

def main():
  n = 7
  gen_ydy_table('COS_LUT', n, lambda i: cos_func(i, n))

main()

