#!/usr/bin/python

"""

Generate lookup tables.
The table has 32 bit floats in hex representation.

"""

import struct
import math
import sys

def float2hex(x):
  """convert a 32 bit to it's hex value"""
  buf = [ord(c) for c in struct.pack('!f', x)]
  return ''.join(['%02x' % b for b in buf])

def gen_table(name, bits, func):
  n = 1 << bits
  print('// generated by ./scripts/lut.py')
  print('#define %s_BITS (%dU)' % (name, bits))
  print('#define %s_SIZE (1U << %d)' % (name, bits))
  print('static const uint32_t %s_data[%s_SIZE] = {' % (name, name))
  for i in range(n):
    if i == 0:
      sys.stdout.write('\t')
    if i != 0 and i % 4 == 0:
      sys.stdout.write('\r\n\t')
    sys.stdout.write('0x%sU, ' % float2hex(func(i)))
  sys.stdout.write('\r\n};\r\n')

def cos_func(i, n):
  k = float(1 << n)
  return math.cos(float(i) * 2.0 * math.pi / k)

def goom_func(i, n):
  k = float((1 << n) - 1)
  b = -math.pi
  m =  math.pi/k
  return math.cos(m * float(i) + b)

def goom_func_dy(i, n):
  if i == (1 << n) - 1:
    return 0.0  
  y0 = goom_func(i, n)
  y1 = goom_func(i + 1, n)
  return y1 - y0 

def main():
  n = 6
  gen_table('GWAVE', n, lambda i: goom_func(i, n))
  gen_table('GWAVE_DY', n, lambda i: goom_func_dy(i, n))
  gen_table('COS_TABLE', n, lambda i: cos_func(i, n))

main()

