#!/usr/bin/python

"""

Generate lookup tables.
The table has 32 bit floats in hex representation.

"""

import struct
import math
import sys

def float2hex(x):
  """convert a 32 bit to it's hex value"""
  buf = [ord(c) for c in struct.pack('!f', x)]
  return ''.join(['%02x' % b for b in buf])


def gen_table(name, bits, func):
  n = 1 << bits
  print('// generated by ./scripts/lut.py')
  print('#define %s_BITS (%dU)' % (name, bits))
  print('#define %s_SIZE (1U << %d)' % (name, bits))
  print('static const uint32_t %s_data[%s_SIZE] = {' % (name, name))
  for i in range(n):
    if i == 0:
      sys.stdout.write('\t')
    if i != 0 and i % 4 == 0:
      sys.stdout.write('\r\n\t')
    sys.stdout.write('0x%sU, ' % float2hex(func(i)))
  sys.stdout.write('\r\n};\r\n')

def main():
  gen_table('GOOM_TABLE', 6, lambda i: math.cos(float(i) * math.pi / float(1 << 6)))
  gen_table('COS_TABLE', 6, lambda i: math.cos(float(i) * 2.0 * math.pi / float(1 << 6)))

main()

