#!/usr/bin/env python
#------------------------------------------------------------------------------
"""
convert a BDF font file to GGM C file form
"""
#------------------------------------------------------------------------------

import getopt
import sys
import os

#------------------------------------------------------------------------------

_ifile = None
_ofile = None

#------------------------------------------------------------------------------

def print_usage(argv):
  print 'Usage: %s [options]' % argv[0]
  print 'Options:'
  print '%-18s%s' % ('-i <input_file>', 'input file')
  print '%-18s%s' % ('-o <output_file>', 'output file')

def error(msg, usage=False):
  print 'error: %s' % msg
  if usage:
    print_usage(sys.argv)
  sys.exit(1)

def warn(msg):
  print 'warning: %s' % msg

def process_options(argv):
  """process command line options"""
  global _ifile, _ofile
  try:
    (opts, args) = getopt.getopt(sys.argv[1:], "i:o:")
  except getopt.GetoptError as err:
    error(str(err), True)
  if args:
    error('invalid arguments on command line', True)
  for (opt, val) in opts:
    if opt == '-i':
      _ifile = val
    if opt == '-o':
      _ofile = val

  if not _ifile:
    error('specify an input file', True)

  if not _ofile:
    name = os.path.split(_ifile)[1].split('.')[0]
    _ofile = '%s.c' % name

#------------------------------------------------------------------------------

class glyph(object):

  def __init__(self, parent, name):
    self.parent = parent
    self.name = name
    self.encoding = None
    self.bbx_w = None
    self.bbx_h = None
    self.bbx_xofs = None
    self.bbx_yofs = None
    self.dwidth_x = None
    self.dwidth_y = None
    self.bitmap = 0
    self.shl = None
    self.shr = None

  def cname(self):
    if self.bbx_h:
      return '%s_%02x' % (self.parent, self.encoding)
    else:
      return '%s_null' % self.parent

  def set_bbx(self, l, n):
    x = l.split()
    if len(x) != 4:
      error('wrong number of BBX parameters at line %d' % n)
    self.bbx_w = int(x[0])
    self.bbx_h = int(x[1])
    self.bbx_xofs = int(x[2])
    self.bbx_yofs = int(x[3])
    self.shl = (self.bbx_w + 7) & ~7
    self.shr = self.shl - self.bbx_w

  def add_bits(self, l, n):
    """add bits to the bitmap"""
    if len(l) != 1:
      error('too much bitmap data at line %d' % n)
    if len(l[0]) != self.shl / 4:
      error('bad bitmap data length at line %d' % n)
    self.bitmap <<= self.shl
    self.bitmap |= int(l[0], 16)
    self.bitmap >>= self.shr

  def encode_bitmap(self):
    # how many bits?
    bits = self.bbx_h * self.bbx_w
    # pad the data to a multiple of 32 bits
    pad = ((bits + 31) & ~31) - bits
    bitmap = self.bitmap << pad
    # return the data string
    fmt = '%%0%dx' % ((bits + pad) / 4)
    s = fmt % bitmap
    s = ['0x%s,' % s[k:k+8] for k in range(0, len(s), 8)]
    return 'static const uint32_t %s[] = {%s};' % (self.cname(), ''.join(s))

  def encode_meta(self, idx):
    s = []
    s.append('%d,%d,%d,%d,%d' % (self.bbx_w, self.bbx_h, self.bbx_xofs, self.bbx_yofs, self.dwidth_x))
    s.append(self.cname())
    return '{%s}, // 0x%02x%s' % (','.join(s), idx, (' (default)', '')[idx == self.encoding])

#------------------------------------------------------------------------------

class font(object):

  def __init__(self, data, cname):
    self.cname = cname
    self.current_glyph = None
    self.hex_to_get = None
    self.properties = {}
    self.glyphs = {}
    self.glyphs_by_code = None
    # break the bdf data into lines
    lines = data.split('\n')
    lines = [l.strip() for l in lines]
    # parse the file
    self.parse_bdf(lines)
    self.sort_glyphs()

  def parse_startfont(self, l, n):
    if l[0] == 'STARTFONT' and l[1] == '2.1':
      return 'global'
    error('no STARTFONT found at line %d' % n)

  def parse_global(self, l, n):
    if l[0] == 'FONT':
      pass
    elif l[0] == 'SIZE':
      pass
    elif l[0] == 'FONTBOUNDINGBOX':
      pass
    elif l[0] == 'STARTPROPERTIES':
      return 'properties'
    elif l[0] == 'CHARS':
      return 'chars'
    else:
      error('unknown global element %s' % l[0])
    return 'global'

  def parse_properties(self, l, n):
    if l[0] == 'ENDPROPERTIES':
      return 'global'
    else:
      self.properties[l[0]] = l[1]
    return 'properties'

  def parse_char(self, l, n):
    if l[0] == 'ENCODING':
      self.current_glyph.encoding = int(l[1])
    elif l[0] == 'SWIDTH':
      pass
    elif l[0] == 'DWIDTH':
      x = l[1].split()
      if len(x) == 1:
        # implicit y == 0, probably invalid BDF, but I've seen it.
        self.current_glyph.dwidth_x = int(x[0])
        self.current_glyph.dwidth_y = 0
      elif len(x) == 2:
        self.current_glyph.dwidth_x = int(x[0])
        self.current_glyph.dwidth_y = int(x[1])
      else:
        error('wrong number of DWIDTH parameters at line %d' % n)
    elif l[0] == 'BBX':
      self.current_glyph.set_bbx(l[1], n)
    elif l[0] == 'BITMAP':
      if self.current_glyph.bbx_h:
        self.hex_to_get = self.current_glyph.bbx_h
        return 'bitmap'
    elif l[0] == 'ENDCHAR':
      self.current_glyph = None
      return 'chars'
    else:
      error('unknown char field %s at line %d' % (l[0], n))
    return 'char'

  def parse_chars(self, l, n):
    if l[0] == 'STARTCHAR':
      if self.current_glyph is None:
        name = l[1].strip()
        self.glyphs[name] = glyph(self.cname, name)
        self.current_glyph = self.glyphs[name]
        return 'char'
      else:
        error('need an ENDCHAR before the STARTCHAR at line %d' % n)
    return 'chars'

  def parse_bitmap(self, l, n):
    self.current_glyph.add_bits(l, n)
    self.hex_to_get -= 1
    if self.hex_to_get == 0:
      return 'char'
    return 'bitmap'

  def parse_bdf(self, lines):
    state = 'startfont'
    for i in range(len(lines)):
      if lines[i].startswith('COMMENT'):
        continue
      l = lines[i].split(' ', 1)
      n = i + 1
      if state == 'startfont':
        state = self.parse_startfont(l, n)
      elif state == 'global':
        state = self.parse_global(l, n)
      elif state == 'properties':
        state = self.parse_properties(l, n)
      elif state == 'chars':
        state = self.parse_chars(l, n)
      elif state == 'char':
        state = self.parse_char(l, n)
      elif state == 'bitmap':
        state = self.parse_bitmap(l, n)
      else:
        error('bad state %s' % state)

  def sort_glyphs(self):
    # sort the glyphs by the encoding value: assume 0..255
    self.glyphs_by_code = [None,] * 256
    for g in self.glyphs.values():
      if g.encoding < 0 or g.encoding > 255:
        warn('glyph encoding for "%s" (%d) is out of range' % (g.name, g.encoding))
        continue
      if self.glyphs_by_code[g.encoding] is None:
        self.glyphs_by_code[g.encoding] = g
      else:
        error('multiple glyphs have %d for their encoding' % g.encoding)

  def max_ascent(self):
    """return the maximum ascent of any glyph in the font"""
    if self.properties.has_key('FONT_ASCENT'):
      return int(self.properties['FONT_ASCENT'])
    if len(self.glyphs) == 0:
      error('no glyphs defined')
    assert False, 'TODO: work out max font ascent'

  def max_descent(self):
    """return the maximum descent of any glyph in the font"""
    if self.properties.has_key('FONT_DESCENT'):
      return -int(self.properties['FONT_DESCENT'])
    if len(self.glyphs) == 0:
      error('no glyphs defined')
    assert False, 'TODO: work out max font descent'

  def default_glyph(self):
    """return the default glyph for unspecified encodings"""
    if self.properties.has_key('DEFAULT_CHAR'):
      return self.glyphs_by_code[int(self.properties['DEFAULT_CHAR'])]
    # use a space character for the default
    g = self.glyphs_by_code[0x20]
    if g is not None:
      return g
    assert False, "what's the default glyph?"

  def encode_preamble(self):
    """return the c-code preamble"""
    s = []
    s.append("// generated by: %s (don't edit)" % ' '.join(sys.argv))
    if self.properties.has_key('COPYRIGHT'):
      s.append('// Copyright: %s' % self.properties['COPYRIGHT'])
    s.append('#include "lcd.h"')
    return '\n'.join(s)

  def encode_bitmaps(self):
    """encode the glyph bitmap arrays"""
    # encode each glyph bitmap
    s = [g.encode_bitmap() for g in self.glyphs_by_code if g is not None and g.bbx_h > 0]
    # add a null bitmap if needed
    for g in self.glyphs_by_code:
      if g is not None and g.bbx_h == 0:
        s.append('static const uint32_t %s_null[] = {0};' % self.cname)
        break
    return '\n'.join(s)

  def encode_font(self):
    """encode the font structure"""
    s = []
    s.append('const struct font %s = {' % self.cname)
    s.append('  .ascent = %d,' % self.max_ascent())
    s.append('  .descent = %d,' % self.max_descent())
    s.append('  .glyphs = {')
    for i, g in enumerate(self.glyphs_by_code):
      if g is None:
        g = self.default_glyph()
      s.append('    %s' % g.encode_meta(i))
    s.append('  }, ')
    s.append('};')
    return '\n'.join(s)

  def encode_ggm(self):
    """encode the ggm c-code"""
    s = []
    s.append(self.encode_preamble())
    s.append(self.encode_bitmaps())
    s.append(self.encode_font())
    return '\n'.join(s)

#------------------------------------------------------------------------------

def get_cname(fname):
  """derive the c-code font name from the input filename"""
  x = os.path.split(fname)[1]
  return os.path.splitext(x)[0]

#------------------------------------------------------------------------------

def main():
  process_options(sys.argv)
  cname = get_cname(_ifile)
  # read the input bdf data
  f = open(_ifile, 'r')
  data = f.read()
  f.close()
  # parse the bdf data and re-encode as a ggm structure
  x = font(data, cname)
  code = x.encode_ggm()
  # write the output
  f = open(_ofile, 'w')
  f.write(code)
  f.close()

main()

#------------------------------------------------------------------------------
