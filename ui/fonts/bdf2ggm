#!/usr/bin/env python
#------------------------------------------------------------------------------
"""
convert a BDF font file to GGM C file form
"""
#------------------------------------------------------------------------------

import getopt
import sys
import os

#------------------------------------------------------------------------------

_ifile = None
_ofile = None

#------------------------------------------------------------------------------

def print_usage(argv):
  print('Usage: %s [options]' % argv[0])
  print('Options:')
  print('%-18s%s' % ('-i <input_file>', 'input file'))
  print('%-18s%s' % ('-o <output_file>', 'output file'))

def error(msg, usage = False):
  print('error: %s' % msg)
  if usage:
    print_usage(sys.argv)
  sys.exit(1)

def warning(msg, fname = True):
  if fname:
    print('%s: warning: %s' % (_ifile, msg))
  else:
    print('warning: %s' % msg)

def process_options(argv):
  """process command line options"""
  global _ifile, _ofile
  try:
    (opts, args) = getopt.getopt(sys.argv[1:], "i:o:")
  except getopt.GetoptError as err:
    error(str(err), True)
  if args:
    error('invalid arguments on command line', True)
  for (opt, val) in opts:
    if opt == '-i':
      _ifile = val
    if opt == '-o':
      _ofile = val

  if not _ifile:
    error('specify an input file', True)

  if not _ofile:
    name =  os.path.split(_ifile)[1].split('.')[0]
    _ofile =  '%s.c' % name

#------------------------------------------------------------------------------

class font(object):

  def __init__(self, fname):
    f = open(fname, 'r')
    lines = f.readlines()
    f.close
    for l in lines:
      print l

#------------------------------------------------------------------------------

def main():
  process_options(sys.argv)
  print(_ifile, _ofile)
  f = font(_ifile)

main()

#------------------------------------------------------------------------------
